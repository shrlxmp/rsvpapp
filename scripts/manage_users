#!/usr/bin/env python3
import os
import sys

import click
from mongoengine.queryset.visitor import Q
from mongoengine.errors import DoesNotExist

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from rsvp.models import Event, User
from rsvp.utils import markdown_to_html


@click.group()
def cli():
    """A CLI to manage users"""


@click.command()
@click.option('--format', default='tsv')
@click.option('--include-roles', default=False, is_flag=True)
def list_users(format='tsv', include_roles=False):
    seperator = ', ' if format == 'csv' else '\t'
    output_format = (
        '{name}{sep}{email}{sep}{roles}' if include_roles else '{name}{sep}{email}'
    )
    for user in User.objects.all().order_by('email'):
        click.echo(
            output_format.format(
                name=user.name,
                email=user.email,
                roles=', '.join(user.roles),
                sep=seperator,
            )
        )


@click.command()
@click.argument('role', type=str)
def list_role_users(role):
    click.echo('Listing users with the role - {}'.format(role))
    for user in User.objects(roles__in=[role]).order_by('email'):
        click.echo('{}\t{}'.format(user.email, ', '.join(user.roles)))


@click.command()
def list_roles():
    roles = {
        role
        for user in User.objects.only('roles')
        for role in (user.roles or [])
    }
    for role in sorted(roles):
        users = User.objects(roles__in=[role]).only('email')
        users_count = users.count()
        if users_count <= 3:
            display_users = ', '.join(users.values_list('email'))
        else:
            display_users = '{} users'.format(users_count)
        click.echo('{}\t{}'.format(role, display_users))


@click.command()
@click.argument('role', type=str)
@click.option('--all', default=False, is_flag=True)
@click.argument('users', type=str, nargs=-1)
def add_role(role, users, all):
    """Add a role to the specified users."""
    if all:
        click.echo('Adding role {} to all users'.format(role))
        User.objects(roles__nin=[role]).update(push__roles=role)
    else:
        users = User.objects(Q(email__in=users) & Q(roles__nin=[role]))
        click.echo('Adding role {} to {} users'.format(role, users.count()))
        users.update(push__roles=role)


@click.command()
@click.argument('role', type=str)
@click.option('--all', default=False, is_flag=True)
@click.argument('users', type=str, nargs=-1)
def remove_role(role, users, all):
    """Remove a role for the specified users."""
    if all:
        click.echo('Removing role {} from all users'.format(role))
        User.objects(roles__in=[role]).update(pull__roles=role)
    else:
        click.echo('Removing role {} from {} users'.format(role, len(users)))
        users = User.objects(Q(email__in=users) & Q(roles__in=[role]))
        users.update(pull__roles=role)


@click.command()
def list_genders():
    genders = set(User.objects.values_list('gender'))
    for gender in sorted(genders, key=lambda x: str(x)):
        users = User.objects(gender=gender).only('email')
        users_count = users.count()
        if users_count <= 3:
            display_users = ', '.join(users.values_list('email'))
        else:
            display_users = '{} users'.format(users_count)
        click.echo('{}\t{}'.format(gender, display_users))


@click.command()
@click.argument('gender', type=str)
@click.argument('users', type=str, nargs=-1)
def set_gender(gender, users):
    click.echo('Setting gender {} for {} users'.format(gender, len(users)))
    users = User.objects(Q(email__in=users))
    users.update(gender=gender)


@click.command()
@click.argument('user', type=str)
@click.argument('attribute', type=str)
@click.argument('value', type=str)
def set_user_attribute(user, attribute, value):
    user = User.objects.get(email=user)
    if attribute not in user._fields:
        click.echo('{} is not a valid attribute for users'.format(attribute))
        return

    click.echo('Setting {} to {} for {} users'.format(attribute, value, user))
    setattr(user, attribute, markdown_to_html(value))
    user.save()


@click.command()
@click.argument('emails', type=str, nargs=-1)
def canonicalize_users(emails):
    """The first email ID will be used as the canonical email.

    All the IDs following the first one, will be replaced by the first one.

    """
    if len(emails) < 2:
        click.echo('Need at least 2 emails to canonicalize users')
        return

    canonical_email = emails[0]
    canonical_user = User.objects.get(email=canonical_email)
    for email in emails[1:]:
        user = User.objects.get(email=email)
        for event in Event.objects():
            try:
                rsvp = event.rsvps.get(user=user)
            except DoesNotExist:
                pass
            else:
                click.echo('Changing rsvp {}'.format(rsvp.id))
                rsvp.user = canonical_user
                rsvp.save()
        user.delete()


cli.add_command(list_users)
cli.add_command(list_roles)
cli.add_command(list_role_users)
cli.add_command(add_role)
cli.add_command(canonicalize_users)
cli.add_command(remove_role)
cli.add_command(list_genders)
cli.add_command(set_gender)
cli.add_command(set_user_attribute)
if __name__ == '__main__':
    cli()
