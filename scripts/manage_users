#!/usr/bin/env python3
import csv
from datetime import datetime
import os
import sys

import click
from mongoengine.queryset.visitor import Q
from mongoengine.errors import DoesNotExist
import requests

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from rsvp.models import Event, Role, User
from rsvp.utils import markdown_to_html


@click.group()
def cli():
    """A CLI to manage users"""


@click.command()
@click.option("--format", default="tsv")
@click.option("--team", default="default")
@click.option("--display-roles", default=False, is_flag=True)
@click.option("--display-gender", default=False, is_flag=True)
@click.option("--include-roles", multiple=True)
def list_users(
    team=None,
    format="tsv",
    display_roles=False,
    include_roles=None,
    display_gender=False,
):
    seperator = ", " if format == "csv" else "\t"
    users = (
        User.objects(roles__name__in=include_roles, roles__team=team)
        if include_roles
        else User.objects.all()
    )
    output_format = (
        '{name}{sep}{email}{sep}"{roles}"'
        if display_roles
        else "{name}{sep}{email}"
    )
    if display_gender:
        output_format = "{{gender}}{{sep}}{}".format(output_format)
    for user in users.order_by("email"):
        click.echo(
            output_format.format(
                name=user.name,
                email=user.email,
                gender=user.gender,
                roles=", ".join(r.name for r in user.visible_roles),
                sep=seperator,
            )
        )


@click.command()
def list_roles():
    roles = {
        (role.team.fetch().name, role.team.fetch().slug, role.name)
        for user in User.objects.only("roles")
        for role in user.roles
    }
    for team_name, team_slug, role in sorted(roles):
        users = User.objects(
            roles__name__in=[role], roles__team=team_slug
        ).only("email")
        users_count = users.count()
        if users_count <= 3:
            display_users = ", ".join(users.values_list("email"))
        else:
            display_users = "{} users".format(users_count)
        click.echo("{}\t{}\t{}".format(team_name, role, display_users))


@click.command()
@click.option("--team", type=str, required=True)
@click.argument("role", type=str)
@click.argument("users", type=str, nargs=-1)
def add_role(role, users, team):
    """Add a role in specified team to the specified users."""
    users = User.objects(Q(email__in=users) & Q(roles__name__nin=[role]))
    click.echo("Adding role {} to {} users".format(role, users.count()))
    users.update(push__roles=Role(name=role, team=team))


@click.command()
@click.option("--team", default="default")
@click.argument("info", type=str, nargs=-1)
def create_admins(info, team):
    """Create admin users with given email ids."""
    for each in info:
        name, email = each.split(":")
        try:
            user = User.objects.get(email=email)
        except DoesNotExist:
            user = User(name=name, email=email)
            user.save()
        finally:
            for role in (".approved-user", "admin"):
                if not user.has_role(role):
                    user.add_role_in_team(team, role)


@click.command()
@click.argument("role", type=str)
@click.option("--all", default=False, is_flag=True)
@click.argument("users", type=str, nargs=-1)
def remove_role(role, users, all):
    """Remove a role for the specified users."""
    if all:
        click.echo("Removing role {} from all users".format(role))
        User.users_with_role(role).update(pull__roles__name=role)
    else:
        click.echo("Removing role {} from {} users".format(role, len(users)))
        users = User.users_with_role(role).filter(email__in=users)
        users.update(pull__roles__name=role)


@click.command()
def list_genders():
    genders = set(User.objects.values_list("gender"))
    for gender in sorted(genders, key=lambda x: str(x)):
        users = User.objects(gender=gender).only("email")
        users_count = users.count()
        if users_count <= 3:
            display_users = ", ".join(users.values_list("email"))
        else:
            display_users = "{} users".format(users_count)
        click.echo("{}\t{}".format(gender, display_users))


@click.command()
@click.argument("gender", type=str)
@click.argument("users", type=str, nargs=-1)
def set_gender(gender, users):
    click.echo("Setting gender {} for {} users".format(gender, len(users)))
    users = User.objects(Q(email__in=users))
    users.update(gender=gender)


@click.command()
@click.argument("user", type=str)
@click.argument("attribute", type=str)
@click.argument("value", type=str)
def set_user_attribute(user, attribute, value):
    user = User.objects.get(email=user)
    if attribute not in user._fields:
        click.echo("{} is not a valid attribute for users".format(attribute))
        return

    click.echo("Setting {} to {} for {} users".format(attribute, value, user))
    setattr(user, attribute, markdown_to_html(value))
    user.save()


@click.command()
@click.argument("csv_url", type=str)
def set_birthdays_from_csv(csv_url):
    reader = csv.DictReader(requests.get(csv_url).text.splitlines())
    csv_data = {
        row["Email address"].lower(): row["Date of Birth"] for row in reader
    }
    users = User.objects.filter(dob=None)
    for user in users:
        email = user.email
        if email not in csv_data:
            continue
        birthday = datetime.strptime(csv_data[user.email], "%m/%d/%Y")
        click.echo("Setting {}'s birthday to {}".format(email, birthday))
        user.dob = birthday
        user.save()


@click.command()
@click.argument("emails", type=str, nargs=-1)
def canonicalize_users(emails):
    """The first email ID will be used as the canonical email.

    All the IDs following the first one, will be replaced by the first one.

    """
    if len(emails) < 2:
        click.echo("Need at least 2 emails to canonicalize users")
        return

    canonical_email = emails[0]
    canonical_user = User.objects.get(email=canonical_email)
    for email in emails[1:]:
        user = User.objects.get(email=email)
        for event in Event.objects():
            try:
                rsvp = event.rsvps.get(user=user)
            except DoesNotExist:
                pass
            else:
                click.echo("Changing rsvp {}".format(rsvp.id))
                rsvp.user = canonical_user
                rsvp.save()
        user.delete()


@click.command()
@click.argument("emails", type=str, nargs=-1)
def notify_santas(emails):
    """Manually notify santas missed out when the automated script was run.

    Each argument is a pair of email addresses separated by a comma. For
    instance, santa@example.com,kiddo@email.com. Each such santa,kiddo pair is
    one argument to the command.

    """

    def process_pair(email):
        pair = [e.strip() for e in email.split(",")]
        assert len(pair) == 2
        assert "@" in pair[0]
        assert "@" in pair[1]
        return pair

    pairs = [process_pair(email) for email in emails]
    if not pairs:
        click.echo("Need at least one santa,kiddo pair!")
        return

    from rsvp.app import app
    from rsvp.rudolph import notify_santas

    click.echo("Notifying pairs: {}".format(dict(pairs)))
    with app.app_context():
        notify_santas(pairs)


cli.add_command(create_admins)
cli.add_command(list_users)
cli.add_command(list_roles)
cli.add_command(add_role)
cli.add_command(canonicalize_users)
cli.add_command(remove_role)
cli.add_command(list_genders)
cli.add_command(set_gender)
cli.add_command(set_user_attribute)
cli.add_command(set_birthdays_from_csv)
cli.add_command(notify_santas)
if __name__ == "__main__":
    cli()
