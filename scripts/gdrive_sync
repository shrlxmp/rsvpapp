#!/usr/bin/env python3
"""Script to update the permissions of a shared GDrive folder

This script uses a service account to manage the permissions of a shared folder
in GDrive. The service account was created from this page:
https://console.developers.google.com/projectselector/iam-admin/serviceaccounts

The credentials of the service account have been saved to a private gist whose
URL has been set as an environment variable. The credentials could potentially
be directly saved as environment variables, but this seemed much more easier to
manage.

*NOTE*: Ensure that the GDrive API has been enabled in the project that this
service account is being used from.

*NOTE*: Ensure that the drive has been (manually) shared with the user of the
 service account, before trying to run this script.

"""

import os
import sys

import click

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from rsvp.models import GDrivePhoto, User
from rsvp.gdrive_utils import create_service, photos, update_permissions
from rsvp.utils import zulip_announce_new_photos


@click.group()
@click.pass_context
def cli(ctx):
    """A CLI to manage Google Drive photos related actions"""
    ctx.obj.update(
        {
            "service": create_service(),
            "gdrive_root": os.environ["GOOGLE_DRIVE_MEDIA_DRIVE_ID"],
        }
    )


@click.command()
@click.pass_context
def sync_photos(ctx):
    service = ctx.obj["service"]
    gdrive_root = ctx.obj["gdrive_root"]
    gd_photos = [
        GDrivePhoto(**photo) for photo in photos(service, gdrive_root)
    ]
    previous_photos = set(GDrivePhoto.objects.values_list("gdrive_id"))
    previous_paths = set(
        GDrivePhoto.objects.values_list("gdrive_parent", "gdrive_path")
    )
    GDrivePhoto.objects.delete()
    GDrivePhoto.objects.insert(gd_photos, load_bulk=False)
    current_photos = set(GDrivePhoto.objects.values_list("gdrive_id"))
    current_paths = set(
        GDrivePhoto.objects.values_list("gdrive_parent", "gdrive_path")
    )
    new_photos = GDrivePhoto.objects.filter(
        gdrive_id__in=(current_photos - previous_photos)
    )
    new_paths = current_paths - previous_paths
    zulip_announce_new_photos(new_paths, new_photos)


@click.command()
@click.pass_context
def sync_permissions(ctx):
    service = ctx.obj["service"]
    gdrive_root = ctx.obj["gdrive_root"]
    emails = User.approved_users().values_list("email")
    emails = [email.lower() for email in emails]
    update_permissions(service, gdrive_root, emails)


cli.add_command(sync_photos)
cli.add_command(sync_permissions)

if __name__ == "__main__":
    cli(obj={})
